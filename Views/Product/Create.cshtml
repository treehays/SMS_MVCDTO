@model SMS_MVCDTO.Models.ViewModels.NewProductViewModel


@{
    ViewData["Title"] = "Create";
}
@{
    if (TempData["success"] != null)
    {
        <h2>@TempData["success"]</h2>
    }
    if (TempData["failed"] != null)
    {
        <h2>@TempData["failed"]</h2>
    }
}


<main class="main">
    <!-- <div class="dashboard"> -->
    <div class="form-container">

        <div id="Data-form">
            @using (Html.BeginForm("Create", "Product"))
            {

                <h1>Add new Product</h1>

                <hr />
                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.Barcode, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.Barcode, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.Barcode,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.Name, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.Name, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.Name,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.Description, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.Description, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.Description,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.SellingPrice, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.SellingPrice, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.SellingPrice,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.Quantity, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.Quantity, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.Quantity,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.CreateProduct.ReorderLevel, new {@class = "control-label"})
                    @Html.TextBoxFor(x => x.CreateProduct.ReorderLevel, new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.ReorderLevel,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    @Html.LabelFor(x => x.PCategory, new {@class = "control-label"})
                    @Html.DropDownListFor(x => x.CreateProduct.Category, new SelectList(Model.PCategory,"Data.CategoryCode","Data.Name"),"Select Category" ,new {@class = "form-control"})
                    @Html.ValidationMessageFor(x => x.CreateProduct.Category,"", new {@class="text-danger"})
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-success">Add</button>
                </div>
            }

        </div>

    </div>

    <!-- search box  -->
    <div class="search-container">
        <form>
            <input type="text" placeholder="Search...">
            <button type="submit"><i class="fa fa-search"></i> Search </button>
        </form>
    </div>



    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }

</main>
@* ends here *@



